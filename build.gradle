// Root build.gradle (Groovy DSL)
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2' apply false
    id 'io.spring.dependency-management' version '1.1.7' apply false
}

allprojects {
    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    // Java toolchain 설정: Java 17 사용
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.4'
        }
    }
}

// ------------------------------
// QueryDSL 관련 모듈 설정
def queryDslModules = [
        project(':user-service'),
        project(':lifelog-service'),
        project(':storage-module'),

]

queryDslModules.each { proj ->
    proj.dependencies {
        // h2
        runtimeOnly 'com.h2database:h2'

        // JPA
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'


        // QueryDSL
        implementation 'com.blazebit:blaze-persistence-integration-querydsl-expressions-jakarta:1.6.11'

        // Annotation processing (Java 기본 AP 사용)
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
        annotationProcessor 'com.querydsl:querydsl-sql:5.0.0'
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    }

}

// ------------------------------
// RabbitMQ 관련 모듈 설정
def rabbitMQModules = [
        project(':user-service'),
        project(':lifelog-service'),

]

rabbitMQModules.each { proj ->
    proj.dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-amqp'
    }
}
